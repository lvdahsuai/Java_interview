1.微服务
	-微服务组成的系统
	-每个微服务都是单独的进程 可以单独运行
	-每个微服务围绕着业务建立,拆分,独立部署,运维
	-要求轻量级通信(和语言无关,和运行系统无关)
	-中心化管理

2.微服务架构特点
	-系统高可用(服务之间崩溃不会互相影响)
	-系统高扩展性
	-快速迭代
	-持续交付


3.微服务总体架构设计
	-微服务网关 
		-维护海量链接(tcp等)
		-用户合法性登录校验,session管理
		-把请求转发到聚合层
	-微服务聚合层(按业务拆分多个微服务)
		-业务处理
		-归集原子层的结果做业务处理
	-微服务原子层
		-提供增删改查
	-微服务数据层
	-轻量级通信协议
		-rest 基于http
		-hal 基于rest
		-rpc 远程过程调用 
		-消息队列 异步调用
	-微服务注册(注册中心)
		-储存 ip,port config等
		-注册中心高可用
	-微服务发现(基于注册中心来发现)
		-可通过注册中心的心跳服务 和超时信息 利用负载均衡吧请求放入宁一个服务导致请求不丢失

4-微服务柔性可用(系统降级)
   -流量高峰期 短时请求量大,服务能力有限,性能下降服务宕机 系统雪崩
	- 目标:保证核心服务可用,非核心服务可用弱,甚至不可用
		-业务层面方法:
			-拒绝部分请求
				-拒绝部分老请求
					确保新请求正常响应
					RPC队列方式(请求入队,出队时间处理请求时,检查请求在队列请求时间操作一定时间,直接丢弃)
				-优先级请求方式
					非核心业请求直接丢弃
				-随机丢弃请求
			-关闭部分服务(与业务相关)
		-数据层面方法:
			-更新请求
				持久到消息队列
				只更新缓存
			-读请求
				读缓存
			-数据补齐
				高峰期过后 消息队列持久到数据库

5.服务治理-监控手段
	1.进程监控
	2.语义监控(模拟请求)
	3.错误日志监控
	4.数据波动监控(流量的突增突降)
	5.数据资源监控(机器资源 如磁盘 网络 内存等)
	
	













































	